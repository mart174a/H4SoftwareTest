@page "/"
@using Newtonsoft.Json;
@* @attribute [Microsoft.AspNetCore.Authorization.Authorize(Policy = "AuthenticatedUser")] *@

@inject AuthenticationStateProvider _authenticationStateProvider;
@inject Codes.RoleHandler _roleHandler;
@inject IServiceProvider _serviceProvider;

@inject Codes.HashingHandler _hashingHandler;
@inject Codes.EncryptionHandler _encryptionHandler;
@inject HttpClient _httpClient;

<PageTitle>Home</PageTitle>

@if (_isAuthenticated)
{
    <h1>Hello, world!</h1>
    @if (_isAdmin)
    {
        <h2>You are admin</h2>
    }
    else
    {
        <h2>You are NOT admin</h2>
    }
}
else
{
    <div>
        <h1>You must log in to see the content.</h1>
    </div>
}


<br />

@code {
    public bool _isAuthenticated;
    public bool _isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _isAuthenticated = user.Identity.IsAuthenticated;
        _isAdmin = user.IsInRole("Admin");

        string txtToEncrypt = "Køb mælk";
        string encryptedValue = _encryptionHandler.EncryptAsymetrisc(txtToEncrypt);
        string decryptValue = _encryptionHandler.DecryptAsymetrisc(encryptedValue);

        // string txtToEncrypt = "Køb mælk";
        // string encryptValue = _encryptionHandler.EncryptSymetrisc(txtToEncrypt);

        // string decryptValue = _encryptionHandler.DecryptSymetrisc(encryptValue);

        // string txtToHash = "3333333333";
        // string hashedValue = _hashingHandler.BCryptHashing(txtToHash);

        // string txtToHash2 = "3333333333";
        // bool matched = _hashingHandler.BCryptHashingVerify(txtToHash2, hashedValue);

        //bool matched = hashedValue == hashedValue2;
        
        // if (_isAuthenticated)
        //     await _roleHandler.CreateUserRolesAsync(user.Identity.Name, "Admin", _serviceProvider);
    }
}